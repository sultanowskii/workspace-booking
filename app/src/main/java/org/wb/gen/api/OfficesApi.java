/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.wb.gen.api;

import org.wb.gen.model.Office;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-13T23:45:32.148889992+03:00[Europe/Moscow]", comments = "Generator version: 7.10.0")
@Validated
@Controller
@Tag(name = "offices", description = "the offices API")
public interface OfficesApi {

    /**
     * GET /offices/{officeId} : Get office
     *
     * @param officeId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOffice",
        summary = "Get office",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Office.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/offices/{officeId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Office> getOffice(
        @Parameter(name = "officeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("officeId") Integer officeId
    );


    /**
     * GET /offices : Get offices
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOffices",
        summary = "Get offices",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Office.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/offices",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Office>> getOffices(
        
    );

}
