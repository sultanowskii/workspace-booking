/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.wb.gen.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import org.wb.gen.model.OfficeOccupancy;
import org.wb.gen.model.RoomOccupancy;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Controller
@Tag(name = "occupancy", description = "the occupancy API")
public interface OccupancyApi {

    /**
     * GET /occupancy/offices/{id} : Get office occupancy
     *
     * @param id  (required)
     * @param date  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOfficeOccupancy",
        summary = "Get office occupancy",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfficeOccupancy.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerTokenAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/occupancy/offices/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OfficeOccupancy> getOfficeOccupancy(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    );


    /**
     * GET /occupancy/rooms : Get room occupancies
     *
     * @param officeId  (required)
     * @param date  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getRoomOccupancies",
        summary = "Get room occupancies",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoomOccupancy.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerTokenAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/occupancy/rooms",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<RoomOccupancy>> getRoomOccupancies(
        @NotNull @Parameter(name = "officeId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "officeId", required = true) Long officeId,
        @Parameter(name = "date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    );


    /**
     * GET /occupancy/rooms/{id} : Get room occupancy
     *
     * @param id  (required)
     * @param date  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getRoomOccupancy",
        summary = "Get room occupancy",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomOccupancy.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerTokenAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/occupancy/rooms/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<RoomOccupancy> getRoomOccupancy(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    );

}
